service:
  name: inventory-rest-apis
package:
  individually: true

plugins:
  - serverless-offline
  - serverless-domain-manager
  - serverless-deployment-bucket
  - serverless-webpack

provider:
  name: aws
  runtime: nodejs14.x
  stage: ${opt:stage, 'dev'}
  region: ap-south-1
  profile: serverless-admin
  deploymentBucket:
    name: inventory-rest-apis
    serverSideEncryption: AES256
  environment:
    PRODUCT_TABLE_NAME: ${self:custom.ProductTable.name}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: arn:aws:dynamodb:ap-south-1:670022476151:table/Product-dev
        - Effect: Allow
          Action:
            - s3:PutObject
          Resource: arn:aws:s3:::${self:custom.InventoryBucket.name}/*
resources:
  Resources:
    ProductCategoryTable: ${file(infra/resources/dynamodb.yml):ProductCategoryTable}
    ProductTable: ${file(infra/resources/dynamodb.yml):ProductTable}
    InventoryBucket: ${file(infra/resources/s3.yml):InventoryBucket}
    InventoryBucketPolicy: ${file(infra/resources/s3.yml):InventoryBucketPolicy}

functions:
  inventoryHealthCheck:
    handler: app/handlers/health.handler
    events:
      - http:
          method: GET
          path: /health
          cors: true
  postProduct:
    handler: app/handlers/postProduct.handler
    events:
      - http:
          method: POST
          path: products/{BrandId}/product
          cors: true
  updateProduct:
    handler: app/handlers/updateProduct.handler
    events:
      - http:
          method: PATCH
          path: products/{BrandId}/product/{ProductId}
          cors: true
  getProducts:
    handler: app/handlers/getProducts.handler
    events:
      - http:
          method: GET
          path: products/{BrandId}
          cors: true
  getAllCategory:
    handler: app/handlers/getAllCategory.handler
    events:
      - http:
          method: GET
          path: products/category
          cors: true
  getAllProductCategory:
    handler: app/handlers/getAllProductCategory.handler
    events:
      - http:
          method: GET
          path: products/category/{CategoryId}
          cors: true
custom:
  stage: dev
  webpack:
    keepOutputDirectory: true
    includeModules:
      packagePath: './package.json'
    webpackConfig: 'webpack.config.js' # Name of webpack configuration file
    packager: 'npm' # Packager that will be used to package your external modules
    excludeFiles: src/**/*.test.js # Provide a glob for files to ignore
  domains:
    dev: api.dev.migobucks.com
    # prod: api.migobucks.com
  ProductTable:
    name: !Ref ProductTable
    arn: !GetAtt ProductTable.Arn
  ProductCategoryTable:
    name: !Ref ProductCategoryTable
    arn: !GetAtt ProductCategoryTable.Arn
  InventoryBucket:
    name: inventory-rest-apis-${self:provider.stage}
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    basePath: 'inventory'
    stage: dev
    createRoute53Record: true
  bundle:
    linting: false
